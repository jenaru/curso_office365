# Script para limpiar archivos JavaScript y componentes no utilizados
# Ejecutar desde la carpeta HTML/

param(
    [switch]$DryRun = $false,
    [switch]$KeepBackup = $true
)

Write-Host "üßπ Script de Limpieza de Archivos No Utilizados" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

if ($DryRun) {
    Write-Host "üîç MODO DRY RUN - No se realizar√°n cambios reales" -ForegroundColor Yellow
}

# Lista de archivos identificados como no utilizados
$unusedJsFiles = @(
    "js/component-loader.js",
    "js/template-system.js"
)

$unusedComponents = @()

# El componente back-button.html est√° referenciado por archivos JS no utilizados
# pero no se usa directamente, as√≠ que tambi√©n es candidato
$candidateComponents = @(
    "components/back-button.html"
)

Write-Host "`nüìã Archivos marcados para eliminaci√≥n:" -ForegroundColor Red
Write-Host "=====================================" -ForegroundColor Red

Write-Host "`nüìÑ JavaScript files:" -ForegroundColor Yellow
$unusedJsFiles | ForEach-Object { 
    Write-Host "   ‚ùå $_" -ForegroundColor White 
}

Write-Host "`nüìÅ Componente candidato (referenciado solo por JS no utilizados):" -ForegroundColor Yellow
$candidateComponents | ForEach-Object { 
    Write-Host "   ‚ö†Ô∏è  $_" -ForegroundColor White 
}

if ($DryRun) {
    Write-Host "`n[DRY RUN] Los siguientes archivos ser√≠an eliminados:" -ForegroundColor Gray
    ($unusedJsFiles + $candidateComponents) | ForEach-Object { 
        Write-Host "   - $_" -ForegroundColor Gray 
    }
    Write-Host "`nüí° Para ejecutar la limpieza real: .\cleanup-unused-js.ps1" -ForegroundColor Cyan
    return
}

# Confirmar acci√≥n
Write-Host "`n‚ö†Ô∏è  ¬øEst√°s seguro de que quieres eliminar estos archivos?" -ForegroundColor Yellow
Write-Host "   Esto no se puede deshacer f√°cilmente." -ForegroundColor Gray
$confirmation = Read-Host "   Escribe 'SI' para continuar"

if ($confirmation -ne "SI") {
    Write-Host "‚ùå Operaci√≥n cancelada por el usuario." -ForegroundColor Red
    return
}

# Crear backup si se solicita
if ($KeepBackup) {
    $backupDir = "backup_unused_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Write-Host "`nüíæ Creando backup en: $backupDir" -ForegroundColor Cyan
}

# Procesar archivos JS no utilizados
Write-Host "`nüóëÔ∏è  Eliminando archivos JavaScript no utilizados..." -ForegroundColor Red
foreach ($file in $unusedJsFiles) {
    if (Test-Path $file) {
        if ($KeepBackup) {
            $backupPath = Join-Path $backupDir (Split-Path $file -Leaf)
            Copy-Item $file $backupPath
            Write-Host "   üíæ Backup creado: $backupPath" -ForegroundColor Gray
        }
        
        Remove-Item $file -Force
        Write-Host "   ‚úÖ Eliminado: $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è  No encontrado: $file" -ForegroundColor Yellow
    }
}

# Procesar componentes candidatos
Write-Host "`nüóëÔ∏è  Eliminando componentes no utilizados..." -ForegroundColor Red
foreach ($component in $candidateComponents) {
    if (Test-Path $component) {
        if ($KeepBackup) {
            $backupPath = Join-Path $backupDir ("components_" + (Split-Path $component -Leaf))
            Copy-Item $component $backupPath
            Write-Host "   üíæ Backup creado: $backupPath" -ForegroundColor Gray
        }
        
        Remove-Item $component -Force
        Write-Host "   ‚úÖ Eliminado: $component" -ForegroundColor Green
        
        # Verificar si la carpeta components qued√≥ vac√≠a
        if (Test-Path "components") {
            $remainingComponents = Get-ChildItem "components" -File
            if ($remainingComponents.Count -eq 0) {
                Write-Host "`nüìÅ La carpeta 'components' est√° vac√≠a. ¬øEliminarla tambi√©n?" -ForegroundColor Yellow
                $removeComponentsFolder = Read-Host "   Escribe 'SI' para eliminar la carpeta vac√≠a"
                if ($removeComponentsFolder -eq "SI") {
                    Remove-Item "components" -Force
                    Write-Host "   ‚úÖ Carpeta 'components' eliminada" -ForegroundColor Green
                }
            }
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  No encontrado: $component" -ForegroundColor Yellow
    }
}

# Actualizar documentaci√≥n
Write-Host "`nüìù Actualizando documentaci√≥n..." -ForegroundColor Cyan

# Leer el archivo README si existe
$readmeFiles = @("README.md", "README_FILTROS.md")
foreach ($readmeFile in $readmeFiles) {
    if (Test-Path $readmeFile) {
        Write-Host "   üìÑ Revisando: $readmeFile" -ForegroundColor Gray
        # Aqu√≠ podr√≠as agregar l√≥gica para actualizar la documentaci√≥n autom√°ticamente
    }
}

# Resumen final
Write-Host "`nüéâ LIMPIEZA COMPLETADA!" -ForegroundColor Green
Write-Host "======================" -ForegroundColor Green

Write-Host "`nüìä Archivos eliminados:" -ForegroundColor Cyan
($unusedJsFiles + $candidateComponents) | ForEach-Object { 
    Write-Host "   ‚úÖ $_" -ForegroundColor White 
}

if ($KeepBackup) {
    Write-Host "`nüíæ Backup disponible en: $backupDir" -ForegroundColor Cyan
    Write-Host "   Para restaurar archivos: Copy-Item `"$backupDir\*`" -Destination `".`" -Recurse -Force" -ForegroundColor Gray
}

Write-Host "`nüöÄ Beneficios obtenidos:" -ForegroundColor Green
Write-Host "   - Proyecto m√°s limpio y organizado" -ForegroundColor White
Write-Host "   - Menor confusi√≥n sobre qu√© archivos usar" -ForegroundColor White
Write-Host "   - Mejor mantenimiento del c√≥digo" -ForegroundColor White
Write-Host "   - Reducci√≥n del tama√±o del proyecto" -ForegroundColor White

Write-Host "`nüí° Pr√≥ximos pasos recomendados:" -ForegroundColor Yellow
Write-Host "   1. Ejecutar .\analyze-js-usage.ps1 para verificar la limpieza" -ForegroundColor Gray
Write-Host "   2. Probar algunas p√°ginas para asegurar que todo funciona" -ForegroundColor Gray
Write-Host "   3. Actualizar documentaci√≥n si es necesario" -ForegroundColor Gray